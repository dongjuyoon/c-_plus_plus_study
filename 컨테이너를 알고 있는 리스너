//button.cpp
#include "button.h"
#include "listener.h"
Button::Button(){  
}
void Button::mouseClick(){
	for (auto i: llist){
		i->actionPerformed();
	}
}
void Button::addActionListener(ActionListener *l){
	llist.push_back(l);
}

//button.h
#pragma once
#include <list>
class ActionListener;
class Button{
	public:
		Button();  
		void mouseClick();
		void addActionListener(ActionListener *l);
	protected:
		std::list<ActionListener *> llist ;
};


//frame.cpp
#include "frame.h"
#include "button.h"
#include "listener.h"
#include <iostream>
using namespace std;
class PlusActionListener: public ActionListener{
	public:
	PlusActionListener(Frame * f){
		container_ = f;
	}
	
	
	void actionPerformed() override{
		container_ -> addOne();
	}







	protected:
		Frame *container_=0;
};

Frame::Frame(){
	button_ = new Button();
}

void Frame::addOne(){
	data++;
}
void Frame::show(){
	cout << "data = " << data << endl;
}
void Frame::start(){
	button_->addActionListener(new PlusActionListener(this));
	button_->mouseClick();
	button_->mouseClick();
	button_->mouseClick();
}

//frame.h
#pragma once
class Button;
class Frame{
	public:
		Frame();
		void addOne();
		void show();
		void start();
	protected:
		Button *button_;
		int data=0;
};


//listener.h
#pragma once
class ActionListener{
	public:
		virtual void actionPerformed()=0;
};


//main.cpp
// 이번에는 컨테이너의 데이터를 변경할 수 있도록 해보자.
// main에서 생성해서 공급하도록 해보자.
#include <iostream>
#include <list>
#include "frame.h"
using namespace std;
// ActionListener 를 추상 클래스로 만들고 상속을 받아서 
// 필요한 리스너를 만든다.

int main(){
	Frame frm;
	frm.start();
	frm.show();
	return 0;
}
